---
name: Generate STL Files from SCAD

on:
  push:
    branches:
      - main
  pull_request:
    paths:
      - 3D Models/*.scad
  workflow_dispatch:
    inputs:
      force_regenerate:
        description: Force regenerate all STL files even if unchanged
        required: false
        default: false
        type: boolean

jobs:
  generate-stl:
    runs-on: ubuntu-latest
    timeout-minutes: 30     # Prevent workflow from hanging on complex geometries
    outputs:
      artifacts_uploaded: ${{ steps.set-upload-status.outputs.artifacts_uploaded }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0         # Fetch full history for change detection
          token: ${{ secrets.GITHUB_TOKEN }}         # Use GitHub token for pushing

      - name: Cache apt packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-openscad-${{ hashFiles('**/lockfiles') }}
          restore-keys: |
            ${{ runner.os }}-apt-openscad-

      - name: Install OpenSCAD
        run: |
          sudo apt-get update
          sudo apt-get install -y openscad
          openscad --version

      - name: Detect changed SCAD files
        id: changed-files
        if: github.event_name != 'workflow_dispatch' || !github.event.inputs.force_regenerate
        uses: tj-actions/changed-files@v41
        with:
          files: |
            3D Models/*.scad
          files_ignore: |
            **/*.stl

      - name: Check for missing STL files
        id: missing-stl
        run: |
          cd "3D Models"
          missing_files=""
          missing_count=0

          echo "üîç Checking for missing STL files..."
          for scad_file in *.scad; do
            if [ -f "$scad_file" ]; then
              base_name=$(basename "$scad_file" .scad)
              stl_file="${base_name}.stl"
              if [ ! -f "$stl_file" ]; then
                echo "Missing: $stl_file (source: $scad_file)"
                if [ -n "$missing_files" ]; then
                  missing_files="$missing_files 3D Models/$scad_file"
                else
                  missing_files="3D Models/$scad_file"
                fi
                missing_count=$((missing_count + 1))
              else
                echo "Found: $stl_file"
              fi
            fi
          done

          echo "missing_files=$missing_files" >> $GITHUB_OUTPUT
          echo "has_missing=$( [ $missing_count -gt 0 ] && echo 'true' || echo 'false' )" >> $GITHUB_OUTPUT
          echo "missing_count=$missing_count" >> $GITHUB_OUTPUT

          if [ $missing_count -gt 0 ]; then
            echo "üìä Found $missing_count missing STL files"
          else
            echo "‚úÖ All STL files are present"
          fi

      - name: Make STL generation script executable
        run: chmod +x .github/scripts/stl_*.sh

      - name: Generate STL files
        if: >
          steps.changed-files.outputs.any_changed == 'true' ||
          steps.missing-stl.outputs.has_missing == 'true' ||
          github.event.inputs.force_regenerate == 'true'
        run: |
          # Combine changed files and missing files
          changed_files="${{ steps.changed-files.outputs.all_changed_files }}"
          missing_files="${{ steps.missing-stl.outputs.missing_files }}"

          if [ "${{ github.event.inputs.force_regenerate }}" = "true" ]; then
            all_files=""
            force_flag="true"
          else
            all_files="$changed_files $missing_files"
            force_flag="false"
          fi

          ./.github/scripts/stl_generate.sh "$all_files" "$force_flag"

      - name: Generate build report
        if: >
          steps.changed-files.outputs.any_changed == 'true' ||
          steps.missing-stl.outputs.has_missing == 'true' ||
          github.event.inputs.force_regenerate == 'true'
        run: ./.github/scripts/stl_build_report.sh

      - name: Validate STL files
        if: >
          steps.changed-files.outputs.any_changed == 'true' ||
          steps.missing-stl.outputs.has_missing == 'true' ||
          github.event.inputs.force_regenerate == 'true'
        run: ./.github/scripts/stl_validate.sh

      - name: Check for changes in STL files
        id: stl-changes
        run: |
          if git diff --quiet HEAD -- "3D Models/*.stl"; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push updated STL files
        if: >
          steps.stl-changes.outputs.has_changes == 'true' &&
          (github.event_name == 'push' || github.event.inputs.force_regenerate == 'true')
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action STL Generator"

          # Add all STL files and reports
          git add "3D Models/*.stl"
          git add "3D Models/PRINT_SETTINGS.md"
          git add "3D Models/build_report.md"

          # Add build report if it exists
          if [ -f "3D Models/build_report.md" ]; then
            git add "3D Models/build_report.md"
          fi

          # Create commit message based on what was generated
          if [ "${{ github.event.inputs.force_regenerate }}" = "true" ]; then
            commit_msg="üîÑ Force regenerate all STL files from SCAD sources"
          elif [ "${{ steps.missing-stl.outputs.has_missing }}" = "true" ] && \
               [ "${{ steps.changed-files.outputs.any_changed }}" = "true" ]; then
            commit_msg="üèóÔ∏è Auto-generate missing STL files and update changed SCAD sources"
          elif [ "${{ steps.missing-stl.outputs.has_missing }}" = "true" ]; then
            commit_msg="üèóÔ∏è Auto-generate missing STL files from SCAD sources"
          else
            commit_msg="üèóÔ∏è Auto-generate STL files from updated SCAD sources"
          fi

          git commit -m "$commit_msg

          Generated by GitHub Actions on $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          Commit: ${{ github.sha }}

          Files updated:
          $(git diff --name-only HEAD~1 HEAD | grep '\.stl$' | sed 's/^/- /')"

          git push

      - name: Upload STL artifacts
        id: upload-artifacts
        if: >
          steps.changed-files.outputs.any_changed == 'true' ||
          steps.missing-stl.outputs.has_missing == 'true' ||
          github.event.inputs.force_regenerate == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: stl-files-${{ github.sha }}
          path: |
            3D Models/*.stl
            3D Models/PRINT_SETTINGS.md
            3D Models/build_report.md
          retention-days: 30

      - name: Set artifact upload status
        id: set-upload-status
        run: |
          if [ "${{ steps.upload-artifacts.outcome }}" = "success" ]; then
            echo "artifacts_uploaded=true" >> $GITHUB_OUTPUT
          else
            echo "artifacts_uploaded=false" >> $GITHUB_OUTPUT
          fi

      - name: Create PR comment with build results
        if: >
          github.event_name == 'pull_request' &&
          (steps.changed-files.outputs.any_changed == 'true' ||
           steps.missing-stl.outputs.has_missing == 'true' ||
           github.event.inputs.force_regenerate == 'true')
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let comment = '## üèóÔ∏è STL Generation Results\n\n';

            // Add information about what was generated
            if ('${{ steps.missing-stl.outputs.has_missing }}' === 'true') {
              comment += '### üìÅ Missing STL Files Generated\n';
              comment += `Found and generated ${{ steps.missing-stl.outputs.missing_count }} missing STL files.\n\n`;
            }

            if ('${{ steps.changed-files.outputs.any_changed }}' === 'true') {
              comment += '### üîÑ Updated STL Files\n';
              comment += 'STL files were regenerated from modified SCAD sources.\n\n';
            }

            if (fs.existsSync('3D Models/build_report.md')) {
              const report = fs.readFileSync('3D Models/build_report.md', 'utf8');
              comment += report;
            } else {
              comment += 'STL files were generated successfully.\n';
            }

            comment += '\n\nüí° **Note**: STL files are automatically generated from SCAD sources. ';
            comment += 'Download the artifacts from this workflow run to get the latest STL files.';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  validate-stl-quality:
    runs-on: ubuntu-latest
    needs: generate-stl
    if: always() && (needs.generate-stl.result == 'success')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download STL artifacts
        id: download-artifacts
        uses: actions/download-artifact@v4
        with:
          name: stl-files-${{ github.sha }}
          path: ./
        continue-on-error: true

      - name: Check if artifacts were downloaded
        id: check-artifacts
        run: |
          if [ "${{ steps.download-artifacts.outcome }}" = "success" ] && \
             [ -d "3D Models" ] && \
             [ "$(ls -A '3D Models'/*.stl 2>/dev/null | wc -l)" -gt 0 ]; then
            echo "artifacts_available=true" >> $GITHUB_OUTPUT
            echo "‚úÖ STL artifacts downloaded successfully"
          else
            echo "artifacts_available=false" >> $GITHUB_OUTPUT
            echo "‚ùå No STL artifacts available for validation"
            echo "This is normal if no SCAD files were changed and no STL files were missing."
          fi

      - name: Cache apt packages for validation
        if: steps.check-artifacts.outputs.artifacts_available == 'true'
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-meshlab-${{ hashFiles('**/lockfiles') }}
          restore-keys: |
            ${{ runner.os }}-apt-meshlab-

      - name: Install mesh validation tools
        if: steps.check-artifacts.outputs.artifacts_available == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y meshlab

      - name: Validate STL mesh quality
        if: steps.check-artifacts.outputs.artifacts_available == 'true'
        run: |
          cd "3D Models"

          echo "üîç Performing advanced STL validation..."
          validation_failed=false

          for stl_file in *.stl; do
            if [ -f "$stl_file" ]; then
              echo "Analyzing $stl_file..."

              # Get basic file stats
              file_size=$(stat -c%s "$stl_file")
              echo "  File size: $file_size bytes"

              # Use meshlab to validate (strict validation)
              if command -v meshlabserver >/dev/null 2>&1; then
                echo "  Running mesh validation..."
                # Capture both stdout and stderr to detect any issues
                validation_output=$(meshlabserver -i "$stl_file" -o "/tmp/test_${stl_file}" 2>&1)
                validation_exit_code=$?

                if [ $validation_exit_code -eq 0 ] && [ -f "/tmp/test_${stl_file}" ]; then
                  echo "  ‚úÖ Mesh structure is valid"
                  rm -f "/tmp/test_${stl_file}"
                else
                  echo "  ‚ùå Mesh validation FAILED for $stl_file"
                  echo "  Exit code: $validation_exit_code"
                  if [ -n "$validation_output" ]; then
                    echo "  Validation output: $validation_output"
                  fi
                  validation_failed=true
                fi
              else
                echo "  ‚ö†Ô∏è  meshlabserver not available, skipping advanced validation"
              fi
            fi
          done

          if [ "$validation_failed" = true ]; then
            echo ""
            echo "‚ùå STL mesh validation FAILED - some files have invalid geometry"
            echo "üîß This indicates issues in the SCAD source files that need to be fixed"
            exit 1
          else
            echo ""
            echo "‚úÖ All STL files passed mesh validation"
          fi

      - name: Report no validation needed
        if: steps.check-artifacts.outputs.artifacts_available == 'false'
        run: |
          echo "‚ÑπÔ∏è No STL validation performed - no artifacts were generated"
          echo "This is normal when:"
          echo "  - No SCAD files were modified"
          echo "  - All STL files are already present and up-to-date"
          echo "  - The workflow was triggered without any changes requiring STL generation"
